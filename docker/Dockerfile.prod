ARG PYTHON_VERSION=3.11.0
ARG DEBIAN_VERSION=bullseye
FROM python:${PYTHON_VERSION}-slim-${DEBIAN_VERSION} as base
ENV PYTHONUNBUFFERED=true
ENV PYTHONDONTWRITEBYTECODE=true
ENV DJANGO_ALLOWED_HOSTS=
RUN apt-get update && apt-get install -y libpq-dev
WORKDIR /app


FROM base as build
ARG POETRY_VERSION=1.2.2

# Configure Poetry
ENV POETRY_VERSION=${POETRY_VERSION}
ENV POETRY_HOME=/opt/poetry
ENV POETRY_VENV=/opt/poetry-venv
ENV POETRY_CACHE_DIR=/opt/.cache
ENV POETRY_VIRTUALENVS_IN_PROJECT=true

# Install poetry separated from system interpreter
RUN python3 -m venv $POETRY_VENV \
    && $POETRY_VENV/bin/pip install -U pip setuptools \
    && $POETRY_VENV/bin/pip install poetry==${POETRY_VERSION}

# Add `poetry` to PATH
ENV PATH="${PATH}:${POETRY_VENV}/bin"

# Install node
RUN apt-get update \
  && apt-get install -y build-essential curl \
  && curl -sL https://deb.nodesource.com/setup_14.x | bash - \
  && apt-get install -y nodejs --no-install-recommends

# Copy all project files
COPY . .

# Install python dependencies, build CSS and Javascript
RUN poetry install --without dev --no-interaction --no-ansi \
    && poetry run python manage.py tailwind install --no-input \
    && poetry run python manage.py tailwind build --no-input \
    && cd frontend \
    && npm install \
    && npm run build


# Production image
FROM base as prod

# Copy all files
COPY . .

# Copy dependencies
COPY --from=build /app/.venv/ .venv/
ENV PATH="/app/.venv/bin:$PATH"

# Make migrations
RUN python manage.py makemigrations \
    && unset DJANGO_ALLOWED_HOSTS

# Remove Javascript source files and add compiled Javascript
RUN rm -rf ./frontend/src  ./frontend/.babelrc ./frontend/.webpack.config.js
COPY --from=build /app/frontend/static/frontend/main.js frontend/static/frontend/main.js

# Remove Tailwind source files and add compiled CSS
RUN rm -rf ./theme/static_src
COPY --from=build /app/theme/static/css/dist/styles.css theme/static/css/dist/styles.css

# Run your app
CMD ["python", "docker/entrypoint.py"]